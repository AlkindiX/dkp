import sys
import os
import io
import mimetypes
__author__ = "Mohammed Alkindi"
__version__ = '0.1'
__version_type__ = "development"
# Program create desktop files in order to show them as a program in
# Ubuntu Unity, KDE and other launchers
ERROR_OS_NOT_SUPPORTED = 10
ERROR_BIN_NOT_FOUND = 11
help_command_line = \
    """Desktop file creator
    SETTINGS                                    :
                                                :
        -c                                      :Create new .desktop file
        -h                                      :Show help
        -v                                      :Show application version
    SETTING OPTIONS                             :
                                                :
        -c [Binary file] [desktop output]       :"""
file_cmd = "#This file was generated by dkp desktop file maker v" + __version__
help_about = __author__ + " v" + __version__ + " " + __version_type__
dpe_Desktop_Entry = "[Desktop Entry]"
dpe_Desktop_Action_NewDocument = "[Desktop Action NewDocument]"
dp_name="Name" # Support multiple languages. Main language is English
dp_genericname="GenericName"
dp_version="Version"
dp_terminal="Terminal"
mimetypes.MimeTypes
dp_icon="Icon"
dp_actions = "Actions"
dp_type = "Type"
dp_exec = "Exec"
dp_mimetype="MimeType"
dp_Comment="Comment" # Support multiple languages. Main language is English
dp_StartupNotify = "StartupNotify"
dp_X_GIO_NoFuse = "X-GIO-NoFuse"
dp_StartupWMClass = "StartupWMClass"
dp_X_KDE_Protocols = "X-KDE-Protocols"
dp_Categories = "Categories"

# Determine if this os is posix or not
debuglevel = 0  # Set debug level to zero
# Fetch OS data
os_data = os.uname()
f- io.FileIO()
if str(os_data.sysname).lower() != "linux":
    print("ERROR: This operating system is not supported by dkp.")
    quit(ERROR_OS_NOT_SUPPORTED)

# Check and store the given arguments
arg = sys.argv[1:]
if len(arg) > 0:
    if arg[0] == "-h":
        print(help_command_line)
        quit()
    elif arg[0] == "-v":
        print(help_about)
        quit()

if len(arg) < 2:
    print("No arguments, Please type -h for argument list")
    quit()

excefilename = arg[0]
distoffilename = str(arg[1])
try:
    fle = io.FileIO(excefilename)
except FileNotFoundError:
    print("the file name \"" + excefilename + "\" was not found. Please make sure the location of input file")
    quit(ERROR_BIN_NOT_FOUND)
# Check weather if the located file is application, shell or any file is executable
mim = mimetypes.guess_type(excefilename)
# Data enter manuals
data_version = "1.0"
data_version_ = input("Version[" + data_version + "]:")
if data_version_ != "":
    data_version = data_version_

data_terminal = False
data_terminal_ = input("Terminal[" + str(data_terminal) + "]:")
if data_version_ != "":
    data_terminal = bool(data_terminal_)

data_Icon = "Nothing"
data_Icon_ = input("Icon[" + data_Icon + "]:")
if data_Icon_ != "":
    data_Icon = data_Icon_

data_type = "Application"
data_type_ = input("Type[" + data_type + "]:")
if data_type_ != "":
    data_type = data_type_

data_categories = "Anything;"
data_categories_ = input("Categories[" + data_categories + "]:")
if data_categories_ != "":
    data_categories = data_categories_

data_exec = excefilename
data_exec_ = input("Exec[" + excefilename + "]:")
if data_exec_ != "":
    data_exec = data_exec_

data_name = excefilename
data_name_ = input("Name[" + data_name + "]:")
if data_name_ != "":
    data_name = data_name_

data_genericname = excefilename
data_genericname_ = input("GenericName[" + data_genericname + "]:")
if data_genericname_ != "":
    data_genericname = data_genericname_

data_comment = ""
data_comment_ = input("Comment[" + data_comment + "]:")
if data_comment_ != "":
    data_comment = data_comment_

filearray = list((file_cmd,dpe_Desktop_Entry))
filearray.append(dp_version + "=" + data_version)
filearray.append(dp_terminal + "=" + str(data_terminal))
filearray.append(dp_icon + "=" + data_Icon)
filearray.append(dp_type + "=" + data_type)
filearray.append(dp_Categories + "=" + data_categories)
filearray.append(dp_exec + "=" + data_exec)
filearray.append(dp_name + "=" + data_name)
filearray.append(dp_genericname + "=" + data_genericname)
filearray.append(dp_Comment + "=" + data_comment)

filewrite = io.FileIO(distoffilename,mode='w')
for item in filearray:
      filewrite.write(bytearray(item,"UTF-8"))
      filewrite.write(bytearray("\n","UTF-8"))
filewrite.flush()
filewrite.close()
print("Desktop file created at " + distoffilename)